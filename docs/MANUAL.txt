orbitSim3D Manual
= = = = = = = = =

REQUIREMENTS

a) Windows 7+ / Linux

b) Python 3

c) Required Python packages:
 - pyOpenGL
 - glfw
 - pywavefront
 - keyboard

= = = = = = = = =

QUICKSTART

Run main.py from the command prompt or terminal
to start the simulation. 

The command prompt or terminal window will act 
as the command interpreter for the simulation,
and an OpenGL window will appear for 3D rendering.

You can move around the OpenGL scene using WASDQE
keys for rotation and UIOJKL for translation
(strafing) in all axes.

To control the simulation, press C in the command
interpreter window and enter commands. While you
are typing, the simulation will remain paused.

To learn more about using the command interpreter
and see the available commands (and their syntax),
enter the command 'help'.

= = = = = = = = =

HOW THE SIMULATION WORKS

Instead of using Kepler's Laws, which are quite
useful and accurate for most two-body systems, this
simulation calculates the motion of celestial 
bodies and spacecraft in small time steps and
integrates gravitational acceleration from all
celestial bodies currently in the simulation.

This way, no movement happens "on rails", and 
perturbations from distant bodies are always 
accounted for.

One important phenomenon the simulation currently 
lacks is non-spherical gravity due to the 
"lumpiness" of some celestial bodies such as the
Moon. Although negligible beyond the low orbit of
such bodies, this should also be modeled for utmost
accuracy during lengthy simulations.

Relativistic effects are not taken into account
whatsoever.

= = = = = = = = =

CODE ORGANIZATION

main.py         -- initializer, command interpreter 
                -- and main loop

graphics.py     -- OpenGL functions for 3D rendering

vessel_class.py -- the 'vessel' class used for
                -- representing spacecraft or small
				-- objects such as debris chunks
				-- which do not generate notable
				-- gravitational fields
				
body_class.py   -- the 'body' class used for 
                -- representing celestial bodies such
				-- as planets or asteroids, which DO
				-- generate notable gravitational
				-- fields
				
math_utils.py   -- general mathematical functions 
                -- that are not provided by the
                -- math library
