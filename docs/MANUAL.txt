orbitSim3D Manual
= = = = = = = = =

REQUIREMENTS

a) Windows 7+ / Linux

b) Python 3

c) Required Python packages:
 - pyOpenGL
 - glfw
 - pywavefront
 - keyboard
 - matplotlib
 - pyquaternion
 - numpy

= = = = = = = = =

QUICKSTART

Run main.py from the command prompt or terminal
to start the simulation.

To skip the hassle of setting up a planetary system,
choose to load a scenario at the initialization
prompt (there are a couple .osf scenario files in the
'scenarios' folder - simply type the file path).

The command prompt or terminal window will act 
as the command interpreter for the simulation,
and an OpenGL window will appear for 3D rendering.

You can move around the OpenGL scene using WASDQE
keys for rotation and UIOJKL for translation
(strafing) in all axes. If you are not happy with the
controls, you can change them via the 'Configure
OrbitSim3D' option in the initialization menu, or by 
editing data/config/current.cfg file.

To control the simulation, you can either press C
in the command interpreter window and enter 
commands, or press P to use the command panel
window (which will appear after the keypress). While
you are typing on the command line or using the
command panel window, the simulation will remain
paused.

To learn more about using the command interpreter
and see the available commands (and their syntax),
enter the command 'help'.

= = = = = = = = =

HOW THE SIMULATION WORKS

Instead of using Kepler's Laws, which are quite
useful and accurate for most two-body systems, this
simulation calculates the motion of celestial 
bodies and spacecraft in small time steps and
integrates gravitational acceleration from all
celestial bodies currently in the simulation.

(Spacecraft maneuvers work the same way too.)

This way, no movement happens "on rails", and 
perturbations from distant bodies are always 
accounted for.

(However, if you wish, you can still make Kepler
style orbit projections, determine apoapsis and
periapsis; but if the perturbations are too high,
the spacecraft wouldn't necessarily follow the
calculated 2-body orbit path.)

Given a J2 value on scenario setup, the simulation
can also account for the oblateness of celestial 
bodies and apply J2 perturbations.

Relativistic effects are not taken into account
whatsoever.

= = = = = = = = =

SCENARIOS (.OSF)

There are some scenario files provided in .osf
format. These are simple text files that can be
edited by any text editor you like. They contain
all information on the bodies, vessels and
maneuvers in a scenario. Syntax is rather
simple and scenarios are therefore easy to create
and edit.

Check out any of the provided .osf files and read
the comments for more information.

= = = = = = = = =

BATCH FILES (.OBF)

Instead of repeatedly entering some commands every
time you start a scenario, you can create batch
files to read the commands from. These too are
simple text files, and can be edited using any text
editor you like. Syntax is the same as the run-time
commands that are accepted by the interpreter.

= = = = = = = = =

CONFIG FILES (.CFG)

These are text files which hold the options such as
window size and keyboard control settings, as well as
initial values for the simulation such as time step
length (delta_t) or physics-to-output-frame ratio 
(output_rate).

There are only two configuration files;

 - data/config/current.cfg --> the settings currently in use
 - data/config/default.cfg --> the fallback option

= = = = = = = = =

CODE ORGANIZATION

main.py         -- initializer, command interpreter 
                -- and main loop

graphics.py     -- OpenGL functions for 3D rendering

vessel_class.py -- the 'vessel' class used for
                -- representing spacecraft or small
                -- objects such as debris chunks
                -- which do not generate notable
                -- gravitational fields
				
body_class.py   -- the 'body' class used for 
                -- representing celestial bodies such
                -- as planets or asteroids, which DO
                -- generate notable gravitational
                -- fields
				
camera_class.py -- the 'camera' class used for 
                -- representing camera objects
                -- to move and rotate the user's
                -- point of view, as well as track
                -- objects in the 3D scene
				
surface_point_class.py
                -- the 'surface_point' class used for
                -- representing points on the surfaces
                -- of celestial bodies, such as tracking
                -- stations, geographical features or
                -- landing zones

barycenter_class.py
                -- the 'barycenter' class used for
                -- marking barycenters of two or more
                -- celestial bodies and making calculations
                -- relative to them
				
maneuver.py     -- the 'maneuver' classes used for
                -- various types of maneuvers that
                -- can be performed by spacecraft
				
math_utils.py   -- general mathematical functions 
                -- that are not provided by the
                -- math library
				
orbit.py        -- 2-body Keplerian orbit class
                -- that is used for making quick
                -- trajectory projections into
                -- the future
				
plot.py         -- plot class that handles plotting
                -- of variables in certain time
                -- intervals on user's demand
				
command_panel.py
                -- command panel window which
                -- provides a basic GUI interface
                -- for entering commands easily
				
config_utils.py -- handles reading and editing of config
                -- files at data/config which hold values
                -- that the simulations are initialized with
                --
                -- more of a convenience utility rather than
                -- a necessity
				
ui.py           -- includes functions to print alphanumeric
                -- characters on 3D viewport to help out
                -- graphics.py

